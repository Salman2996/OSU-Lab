PART A

1) Non-Recursive Shell script that accepts any number of arguments and print them in the Reverse order, (For example, if the script is named rargs, then executing rargs A B C should produce C B A on the standard output).

2) Shell script that accepts two file names as arguments, check if the permissions for these files are identical and if the permission are identical, outputs the common permissions, otherwise outputs each file name followed by its permission. 

3) Shell function that takes a valid directory names as an argument and recursively descends all the subdirectories, finds the maximum length of any file in that hierarchy and writes this maximum value to the standard output. 

4) Shell script that accepts valid log-in names as arguments and print their corresponding home directories.  If no arguments are specified,  print a  suitable error message 

5) Shell script to implement terminal locking.  It should prompt the user for a password.  After accepting the password entered by the user, it must prompt again for password conformation (to retype password).  If a match occurs, it must lock the terminal and prompt for the password.  If the proper password is entered, the terminal must be unlocked.  Note the script must be written to disregard BREAK, Control-D etc.  No time limit need be implemented for the lock duration.

6) Write a shell script to do the following:
	i) Find the largest of three numbers 
	ii) Reverse the given string 

7) Write a C++ program using Process system call(fork, exit).

8) C++ program to do the following: Using fork () create a child process.  The Child prints its own process-id and id of its parent and then exits.  The parent process waits for its child to finish ( by executing the wait()) and prints its own process-id and the id of its child process and then exits. 

PART B

1) Write a C /C++ Program to demonstrate the Process scheduling using FCFS
2) Write a C /C++ Program to demonstrate the Process scheduling using  SJF
3) Write a C /C++ Program to demonstrate the Process scheduling using  Priority
4) Write a C /C++ Program to demonstrate the Process scheduling using Round Robin
5) Write a C /C++ Program to demonstrate the Process Synchronization using Semaphores (Producer and Consumer problem)
6) Write a C /C++ Program to demonstrate process handling using Deadlock
7) Write a C /C++ Program to demonstrate memory management using FIFO page replacement
8) Write a C /C++ Program to demonstrate memory management using LRU page replacement